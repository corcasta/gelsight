from gelsight_interface import Gelsigth
import pandas as pd
import numpy as np
import time 

def remove_bias(fx, fy, fz, fx_b, fy_b, fz_b):
    fx = fx-fx_b
    fy = fy-fy_b
    fz = fz-fz_b
    
    if fx < 0.0:
        fx = 0.0

    if fy < 0.0:
        fy = 0.0

    if fz < 0.0:
        fz = 0.0

    return fx, fy, fz

def main():
    sensor =  Gelsigth()

    history_fx = []
    history_fy = []
    history_fz = []
    history_time = []

    csv_name = "sample_25.csv"

    #try:
    time_accum = 0
    # Warmup loop
    print("****************** WARMUP ********************")
    while True:
        start = time.time()
        fx, fy, fz = sensor.get_forces()            
        end = time.time()
        time_accum += end-start
        # Im using it to calculate an average of the bias
        history_fx.append(round(fx,3))
        history_fy.append(round(fy,3))
        history_fz.append(round(fz,3))
        print("Time: {:.3f} \t Fx: {:.3f} \t Fy: {:.3f} \t Fz: {:.3f}".format(time_accum, fx, fy, fz))

        if time_accum >= 5:
            break
    fx_b = np.mean(history_fx)
    fy_b = np.mean(history_fy)
    fz_b = np.mean(history_fz)

    history_fx = []
    history_fy = []
    history_fz = []
    history_time = []

    time_accum = 0
    print("****************** START ********************")
    while True:
        start = time.time()
        fx, fy, fz = sensor.get_forces() 
        fx, fy, fz = remove_bias(fx, fy, fz, fx_b, fy_b, fz_b)
        end = time.time()

        time_accum += end-start

        history_fx.append(round(fx,3))
        history_fy.append(round(fy,3))
        history_fz.append(round(fz,3))
        history_time.append(round(time_accum,3))

        print("Time: {:.3f} \t Fx: {:.3f} \t Fy: {:.3f} \t Fz: {:.3f}".format(time_accum, fx, fy, fz))
        
        if time_accum >= 60:
            break
    #except KeyboardInterrupt:
    print("********* Creating Dataframe... *********")
    df = pd.DataFrame({
        "time": history_time,
        "fx": history_fx,
        "fy": history_fy,
        "fz": history_fz
    })
    
    
    df["mag"] = np.sqrt(df["fx"]**2 + df["fy"]**2 + df["fz"]**2)
    df["fx_avg2"] = np.round(df["fx"].rolling(2).mean(), 3)
    df["fy_avg2"] = np.round(df["fy"].rolling(2).mean(), 3)
    df["fz_avg2"] = np.round(df["fz"].rolling(2).mean(), 3)
    df["mag_avg2"] = np.round(df["mag"].rolling(2).mean(), 3)

    df["fx_avg3"] = np.round(df["fx"].rolling(3).mean(), 3)
    df["fy_avg3"] = np.round(df["fy"].rolling(3).mean(), 3)
    df["fz_avg3"] = np.round(df["fz"].rolling(3).mean(), 3)
    df["mag_avg3"] = np.round(df["mag"].rolling(3).mean(), 3)

    df["fx_avg4"] = np.round(df["fx"].rolling(4).mean(), 3)
    df["fy_avg4"] = np.round(df["fy"].rolling(4).mean(), 3)
    df["fz_avg4"] = np.round(df["fz"].rolling(4).mean(), 3)
    df["mag_avg4"] = np.round(df["mag"].rolling(4).mean(), 3)
    
    """
    # This FIRST insertion is just so the labeling tool has the same y-scale
    # when doing the labeling task. After generating the labels we need to
    # get rid of this instance before doing the any deep learning processing
    # also we need to get rid of nans generated by the rolling windows.
    df.loc[-1] = [0.00,
                  30, 30, 30, 30,
                  30, 30, 30, 30,
                  30, 30, 30, 30,
                  30, 30, 30, 30]
    df.index = df.index + 1  # shifting index
    df = df.sort_index() # sorting by index
    """

    df.to_csv(f"dataset_slippage/raw/{csv_name}", index=False)
    print("Done :)")

    print("Releasing resources")
    del sensor


if __name__ == "__main__":
    main()